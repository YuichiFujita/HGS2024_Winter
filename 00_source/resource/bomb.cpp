//============================================================
//
//	爆弾処理 [present.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "bomb.h"
#include "manager.h"
#include "renderer.h"
#include "sound.h"
#include "camera.h"
#include "texture.h"
#include "fade.h"
#include "stage.h"
#include "sceneGame.h"
#include "gameManager.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const int	PRIORITY = 3;		// 爆弾の優先順位
}

//************************************************************
//	静的メンバ変数宣言
//************************************************************
CListManager<CBomb>* CBomb::m_pList = nullptr;	// オブジェクトリスト

//************************************************************
//	子クラス [CBomb] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CBomb::CBomb() : CObjectModel(CObject::LABEL_PRESENT, CObject::DIM_3D, PRIORITY)
{

}

//============================================================
//	デストラクタ
//============================================================
CBomb::~CBomb()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CBomb::Init()
{
	// オブジェクトキャラクターの初期化
	if (FAILED(CObjectModel::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	if (m_pList == nullptr)
	{ // リストマネージャーが存在しない場合

		// リストマネージャーの生成
		m_pList = CListManager<CBomb>::Create();
		if (m_pList == nullptr)
		{ // 生成に失敗した場合

			// 失敗を返す
			assert(false);
			return E_FAIL;
		}
	}

	// リストに自身のオブジェクトを追加・イテレーターを取得
	m_iterator = m_pList->AddList(this);

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CBomb::Uninit()
{
	// リストから自身のオブジェクトを削除
	m_pList->DelList(m_iterator);

	if (m_pList->GetNumAll() == 0)
	{ // オブジェクトが一つもない場合

		// リストマネージャーの破棄
		m_pList->Release(m_pList);
	}

	// オブジェクトキャラクターの終了
	CObjectModel::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CBomb::Update(const float fDeltaTime)
{

}

//============================================================
//	描画処理
//============================================================
void CBomb::Draw(CShader* pShader)
{
	// オブジェクトキャラクターの描画
	CObjectModel::Draw(pShader);
}

//============================================================
//	更新状況の設定処理
//============================================================
void CBomb::SetEnableUpdate(const bool bUpdate)
{
	// 引数の更新状況を設定
	CObject::SetEnableUpdate(bUpdate);	// 自身
}

//============================================================
//	描画状況の設定処理
//============================================================
void CBomb::SetEnableDraw(const bool bDraw)
{
	// 引数の描画状況を設定
	CObject::SetEnableDraw(bDraw);	// 自身
}

//============================================================
//	生成処理
//============================================================
CBomb* Create(const VECTOR3& rPos)
{
	// 爆弾の生成
	CBomb* pPresent = new CBomb;

	if (pPresent == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// 爆弾の初期化
		if (FAILED(pPresent->Init()))
		{ // 初期化に失敗した場合

			// 爆弾の破棄
			SAFE_DELETE(pPresent);
			return nullptr;
		}

		// 位置を設定
		pPresent->SetVec3Position(rPos);

		// 確保したアドレスを返す
		return pPresent;
	}
}

//============================================================
//	リスト取得処理
//============================================================
CListManager<CBomb>* CBomb::GetList()
{
	// オブジェクトリストを返す
	return m_pList;
}
