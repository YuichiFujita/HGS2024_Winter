//============================================================
//
//	ゲームマネージャー処理 [gameManager.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "gameManager.h"
#include "gameState.h"
#include "manager.h"

//************************************************************
//	親クラス [CGameManager] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CGameManager::CGameManager() :
	m_pState	 (nullptr),	// 状態
	m_bControlOK (false)	// 操作可能フラグ
{

}

//============================================================
//	デストラクタ
//============================================================
CGameManager::~CGameManager()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CGameManager::Init()
{
	// メンバ変数を初期化
	m_pState	 = nullptr;	// 状態
	m_bControlOK = true;	// 操作可能フラグ

	// 通常状態にする
	ChangeState(new CGameStateNormal);

	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CGameManager::Uninit()
{
	// 状態の終了
	SAFE_UNINIT(m_pState);
}

//============================================================
//	更新処理
//============================================================
void CGameManager::Update(const float fDeltaTime)
{
	// 状態ごとの更新
	assert(m_pState != nullptr);
	m_pState->Update(fDeltaTime);
}

//============================================================
//	状態の変更処理
//============================================================
HRESULT CGameManager::ChangeState(CGameState* pState)
{
	// 状態の生成に失敗している場合抜ける
	if (pState == nullptr) { assert(false); return E_FAIL; }

	// 状態インスタンスを終了
	SAFE_UNINIT(m_pState);

	// 状態インスタンスを変更
	assert(m_pState == nullptr);
	m_pState = pState;

	// 状態にコンテキストを設定
	m_pState->SetContext(this);

	// 状態インスタンスを初期化
	if (FAILED(m_pState->Init()))
	{ // 初期化に失敗した場合

		assert(false);
		return E_FAIL;
	}

	return S_OK;
}

//============================================================
//	リザルト画面遷移処理
//============================================================
void CGameManager::TransResult()
{
	// リザルト画面に遷移する
	GET_MANAGER->SetLoadScene(CScene::MODE_RESULT);
}

//============================================================
//	通常状態かの確認処理
//============================================================
bool CGameManager::IsNormal() const
{
	// 通常状態かを判定し返す
	return (typeid(*m_pState) == typeid(CGameStateNormal));
}

//============================================================
//	生成処理
//============================================================
CGameManager* CGameManager::Create()
{
	// ゲームマネージャーの生成
	CGameManager* pGameManager = new CGameManager;
	if (pGameManager == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// ゲームマネージャーの初期化
		if (FAILED(pGameManager->Init()))
		{ // 初期化に失敗した場合

			// ゲームマネージャーの破棄
			SAFE_DELETE(pGameManager);
			return nullptr;
		}

		// 確保したアドレスを返す
		return pGameManager;
	}
}

//============================================================
//	破棄処理
//============================================================
void CGameManager::Release(CGameManager*& prGameManager)
{
	// ゲームマネージャーの終了
	assert(prGameManager != nullptr);
	prGameManager->Uninit();

	// メモリ開放
	SAFE_DELETE(prGameManager);
}
